//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DatabaseManager.CoreService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CoreService.IUserService")]
    public interface IUserService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Registration", ReplyAction="http://tempuri.org/IUserService/RegistrationResponse")]
        string Registration(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Registration", ReplyAction="http://tempuri.org/IUserService/RegistrationResponse")]
        System.Threading.Tasks.Task<string> RegistrationAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Login", ReplyAction="http://tempuri.org/IUserService/LoginResponse")]
        string Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Login", ReplyAction="http://tempuri.org/IUserService/LoginResponse")]
        System.Threading.Tasks.Task<string> LoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Logout", ReplyAction="http://tempuri.org/IUserService/LogoutResponse")]
        bool Logout(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Logout", ReplyAction="http://tempuri.org/IUserService/LogoutResponse")]
        System.Threading.Tasks.Task<bool> LogoutAsync(string token);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserServiceChannel : DatabaseManager.CoreService.IUserService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserServiceClient : System.ServiceModel.ClientBase<DatabaseManager.CoreService.IUserService>, DatabaseManager.CoreService.IUserService {
        
        public UserServiceClient() {
        }
        
        public UserServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Registration(string username, string password) {
            return base.Channel.Registration(username, password);
        }
        
        public System.Threading.Tasks.Task<string> RegistrationAsync(string username, string password) {
            return base.Channel.RegistrationAsync(username, password);
        }
        
        public string Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        public System.Threading.Tasks.Task<string> LoginAsync(string username, string password) {
            return base.Channel.LoginAsync(username, password);
        }
        
        public bool Logout(string token) {
            return base.Channel.Logout(token);
        }
        
        public System.Threading.Tasks.Task<bool> LogoutAsync(string token) {
            return base.Channel.LogoutAsync(token);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CoreService.ITagService")]
    public interface ITagService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/AddAnalogInput", ReplyAction="http://tempuri.org/ITagService/AddAnalogInputResponse")]
        void AddAnalogInput(Core.Model.Tag.AnalogInput analogInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/AddAnalogInput", ReplyAction="http://tempuri.org/ITagService/AddAnalogInputResponse")]
        System.Threading.Tasks.Task AddAnalogInputAsync(Core.Model.Tag.AnalogInput analogInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/DeleteAnalogInput", ReplyAction="http://tempuri.org/ITagService/DeleteAnalogInputResponse")]
        bool DeleteAnalogInput(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/DeleteAnalogInput", ReplyAction="http://tempuri.org/ITagService/DeleteAnalogInputResponse")]
        System.Threading.Tasks.Task<bool> DeleteAnalogInputAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/GetAnalogInput", ReplyAction="http://tempuri.org/ITagService/GetAnalogInputResponse")]
        Core.Model.Tag.AnalogInput GetAnalogInput(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/GetAnalogInput", ReplyAction="http://tempuri.org/ITagService/GetAnalogInputResponse")]
        System.Threading.Tasks.Task<Core.Model.Tag.AnalogInput> GetAnalogInputAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/UpdateAnalogInput", ReplyAction="http://tempuri.org/ITagService/UpdateAnalogInputResponse")]
        Core.Model.Tag.AnalogInput UpdateAnalogInput(Core.Model.Tag.AnalogInput analogInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/UpdateAnalogInput", ReplyAction="http://tempuri.org/ITagService/UpdateAnalogInputResponse")]
        System.Threading.Tasks.Task<Core.Model.Tag.AnalogInput> UpdateAnalogInputAsync(Core.Model.Tag.AnalogInput analogInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/GetAllAnalogInputs", ReplyAction="http://tempuri.org/ITagService/GetAllAnalogInputsResponse")]
        Core.Model.Tag.AnalogInput[] GetAllAnalogInputs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/GetAllAnalogInputs", ReplyAction="http://tempuri.org/ITagService/GetAllAnalogInputsResponse")]
        System.Threading.Tasks.Task<Core.Model.Tag.AnalogInput[]> GetAllAnalogInputsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/AddAnalogOutput", ReplyAction="http://tempuri.org/ITagService/AddAnalogOutputResponse")]
        void AddAnalogOutput(Core.Model.Tag.AnalogOutput analogOutput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/AddAnalogOutput", ReplyAction="http://tempuri.org/ITagService/AddAnalogOutputResponse")]
        System.Threading.Tasks.Task AddAnalogOutputAsync(Core.Model.Tag.AnalogOutput analogOutput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/DeleteAnalogOutput", ReplyAction="http://tempuri.org/ITagService/DeleteAnalogOutputResponse")]
        bool DeleteAnalogOutput(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/DeleteAnalogOutput", ReplyAction="http://tempuri.org/ITagService/DeleteAnalogOutputResponse")]
        System.Threading.Tasks.Task<bool> DeleteAnalogOutputAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/GetAnalogOutput", ReplyAction="http://tempuri.org/ITagService/GetAnalogOutputResponse")]
        Core.Model.Tag.AnalogOutput GetAnalogOutput(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/GetAnalogOutput", ReplyAction="http://tempuri.org/ITagService/GetAnalogOutputResponse")]
        System.Threading.Tasks.Task<Core.Model.Tag.AnalogOutput> GetAnalogOutputAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/UpdateAnalogOutput", ReplyAction="http://tempuri.org/ITagService/UpdateAnalogOutputResponse")]
        Core.Model.Tag.AnalogOutput UpdateAnalogOutput(Core.Model.Tag.AnalogOutput analogOutput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/UpdateAnalogOutput", ReplyAction="http://tempuri.org/ITagService/UpdateAnalogOutputResponse")]
        System.Threading.Tasks.Task<Core.Model.Tag.AnalogOutput> UpdateAnalogOutputAsync(Core.Model.Tag.AnalogOutput analogOutput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/GetAllAnalogOutputs", ReplyAction="http://tempuri.org/ITagService/GetAllAnalogOutputsResponse")]
        Core.Model.Tag.AnalogOutput[] GetAllAnalogOutputs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/GetAllAnalogOutputs", ReplyAction="http://tempuri.org/ITagService/GetAllAnalogOutputsResponse")]
        System.Threading.Tasks.Task<Core.Model.Tag.AnalogOutput[]> GetAllAnalogOutputsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/AddDigitalInput", ReplyAction="http://tempuri.org/ITagService/AddDigitalInputResponse")]
        void AddDigitalInput(Core.Model.Tag.DigitalInput digitalInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/AddDigitalInput", ReplyAction="http://tempuri.org/ITagService/AddDigitalInputResponse")]
        System.Threading.Tasks.Task AddDigitalInputAsync(Core.Model.Tag.DigitalInput digitalInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/DeleteDigitalInput", ReplyAction="http://tempuri.org/ITagService/DeleteDigitalInputResponse")]
        bool DeleteDigitalInput(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/DeleteDigitalInput", ReplyAction="http://tempuri.org/ITagService/DeleteDigitalInputResponse")]
        System.Threading.Tasks.Task<bool> DeleteDigitalInputAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/GetDigitalInput", ReplyAction="http://tempuri.org/ITagService/GetDigitalInputResponse")]
        Core.Model.Tag.DigitalInput GetDigitalInput(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/GetDigitalInput", ReplyAction="http://tempuri.org/ITagService/GetDigitalInputResponse")]
        System.Threading.Tasks.Task<Core.Model.Tag.DigitalInput> GetDigitalInputAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/UpdateDigitalInput", ReplyAction="http://tempuri.org/ITagService/UpdateDigitalInputResponse")]
        Core.Model.Tag.DigitalInput UpdateDigitalInput(Core.Model.Tag.DigitalInput digitalInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/UpdateDigitalInput", ReplyAction="http://tempuri.org/ITagService/UpdateDigitalInputResponse")]
        System.Threading.Tasks.Task<Core.Model.Tag.DigitalInput> UpdateDigitalInputAsync(Core.Model.Tag.DigitalInput digitalInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/GetAllDigitalInputs", ReplyAction="http://tempuri.org/ITagService/GetAllDigitalInputsResponse")]
        Core.Model.Tag.DigitalInput[] GetAllDigitalInputs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/GetAllDigitalInputs", ReplyAction="http://tempuri.org/ITagService/GetAllDigitalInputsResponse")]
        System.Threading.Tasks.Task<Core.Model.Tag.DigitalInput[]> GetAllDigitalInputsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/AddDigitalOutput", ReplyAction="http://tempuri.org/ITagService/AddDigitalOutputResponse")]
        void AddDigitalOutput(Core.Model.Tag.DigitalOutput digitalOutput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/AddDigitalOutput", ReplyAction="http://tempuri.org/ITagService/AddDigitalOutputResponse")]
        System.Threading.Tasks.Task AddDigitalOutputAsync(Core.Model.Tag.DigitalOutput digitalOutput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/DeleteDigitalOutput", ReplyAction="http://tempuri.org/ITagService/DeleteDigitalOutputResponse")]
        bool DeleteDigitalOutput(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/DeleteDigitalOutput", ReplyAction="http://tempuri.org/ITagService/DeleteDigitalOutputResponse")]
        System.Threading.Tasks.Task<bool> DeleteDigitalOutputAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/GetDigitalOutput", ReplyAction="http://tempuri.org/ITagService/GetDigitalOutputResponse")]
        Core.Model.Tag.DigitalOutput GetDigitalOutput(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/GetDigitalOutput", ReplyAction="http://tempuri.org/ITagService/GetDigitalOutputResponse")]
        System.Threading.Tasks.Task<Core.Model.Tag.DigitalOutput> GetDigitalOutputAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/UpdateDigitalOutput", ReplyAction="http://tempuri.org/ITagService/UpdateDigitalOutputResponse")]
        Core.Model.Tag.DigitalOutput UpdateDigitalOutput(Core.Model.Tag.DigitalOutput digitalOutput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/UpdateDigitalOutput", ReplyAction="http://tempuri.org/ITagService/UpdateDigitalOutputResponse")]
        System.Threading.Tasks.Task<Core.Model.Tag.DigitalOutput> UpdateDigitalOutputAsync(Core.Model.Tag.DigitalOutput digitalOutput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/GetAllDigitalOutputs", ReplyAction="http://tempuri.org/ITagService/GetAllDigitalOutputsResponse")]
        Core.Model.Tag.DigitalOutput[] GetAllDigitalOutputs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/GetAllDigitalOutputs", ReplyAction="http://tempuri.org/ITagService/GetAllDigitalOutputsResponse")]
        System.Threading.Tasks.Task<Core.Model.Tag.DigitalOutput[]> GetAllDigitalOutputsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITagServiceChannel : DatabaseManager.CoreService.ITagService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TagServiceClient : System.ServiceModel.ClientBase<DatabaseManager.CoreService.ITagService>, DatabaseManager.CoreService.ITagService {
        
        public TagServiceClient() {
        }
        
        public TagServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TagServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TagServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TagServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddAnalogInput(Core.Model.Tag.AnalogInput analogInput) {
            base.Channel.AddAnalogInput(analogInput);
        }
        
        public System.Threading.Tasks.Task AddAnalogInputAsync(Core.Model.Tag.AnalogInput analogInput) {
            return base.Channel.AddAnalogInputAsync(analogInput);
        }
        
        public bool DeleteAnalogInput(string id) {
            return base.Channel.DeleteAnalogInput(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAnalogInputAsync(string id) {
            return base.Channel.DeleteAnalogInputAsync(id);
        }
        
        public Core.Model.Tag.AnalogInput GetAnalogInput(string id) {
            return base.Channel.GetAnalogInput(id);
        }
        
        public System.Threading.Tasks.Task<Core.Model.Tag.AnalogInput> GetAnalogInputAsync(string id) {
            return base.Channel.GetAnalogInputAsync(id);
        }
        
        public Core.Model.Tag.AnalogInput UpdateAnalogInput(Core.Model.Tag.AnalogInput analogInput) {
            return base.Channel.UpdateAnalogInput(analogInput);
        }
        
        public System.Threading.Tasks.Task<Core.Model.Tag.AnalogInput> UpdateAnalogInputAsync(Core.Model.Tag.AnalogInput analogInput) {
            return base.Channel.UpdateAnalogInputAsync(analogInput);
        }
        
        public Core.Model.Tag.AnalogInput[] GetAllAnalogInputs() {
            return base.Channel.GetAllAnalogInputs();
        }
        
        public System.Threading.Tasks.Task<Core.Model.Tag.AnalogInput[]> GetAllAnalogInputsAsync() {
            return base.Channel.GetAllAnalogInputsAsync();
        }
        
        public void AddAnalogOutput(Core.Model.Tag.AnalogOutput analogOutput) {
            base.Channel.AddAnalogOutput(analogOutput);
        }
        
        public System.Threading.Tasks.Task AddAnalogOutputAsync(Core.Model.Tag.AnalogOutput analogOutput) {
            return base.Channel.AddAnalogOutputAsync(analogOutput);
        }
        
        public bool DeleteAnalogOutput(string id) {
            return base.Channel.DeleteAnalogOutput(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAnalogOutputAsync(string id) {
            return base.Channel.DeleteAnalogOutputAsync(id);
        }
        
        public Core.Model.Tag.AnalogOutput GetAnalogOutput(string id) {
            return base.Channel.GetAnalogOutput(id);
        }
        
        public System.Threading.Tasks.Task<Core.Model.Tag.AnalogOutput> GetAnalogOutputAsync(string id) {
            return base.Channel.GetAnalogOutputAsync(id);
        }
        
        public Core.Model.Tag.AnalogOutput UpdateAnalogOutput(Core.Model.Tag.AnalogOutput analogOutput) {
            return base.Channel.UpdateAnalogOutput(analogOutput);
        }
        
        public System.Threading.Tasks.Task<Core.Model.Tag.AnalogOutput> UpdateAnalogOutputAsync(Core.Model.Tag.AnalogOutput analogOutput) {
            return base.Channel.UpdateAnalogOutputAsync(analogOutput);
        }
        
        public Core.Model.Tag.AnalogOutput[] GetAllAnalogOutputs() {
            return base.Channel.GetAllAnalogOutputs();
        }
        
        public System.Threading.Tasks.Task<Core.Model.Tag.AnalogOutput[]> GetAllAnalogOutputsAsync() {
            return base.Channel.GetAllAnalogOutputsAsync();
        }
        
        public void AddDigitalInput(Core.Model.Tag.DigitalInput digitalInput) {
            base.Channel.AddDigitalInput(digitalInput);
        }
        
        public System.Threading.Tasks.Task AddDigitalInputAsync(Core.Model.Tag.DigitalInput digitalInput) {
            return base.Channel.AddDigitalInputAsync(digitalInput);
        }
        
        public bool DeleteDigitalInput(string id) {
            return base.Channel.DeleteDigitalInput(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteDigitalInputAsync(string id) {
            return base.Channel.DeleteDigitalInputAsync(id);
        }
        
        public Core.Model.Tag.DigitalInput GetDigitalInput(string id) {
            return base.Channel.GetDigitalInput(id);
        }
        
        public System.Threading.Tasks.Task<Core.Model.Tag.DigitalInput> GetDigitalInputAsync(string id) {
            return base.Channel.GetDigitalInputAsync(id);
        }
        
        public Core.Model.Tag.DigitalInput UpdateDigitalInput(Core.Model.Tag.DigitalInput digitalInput) {
            return base.Channel.UpdateDigitalInput(digitalInput);
        }
        
        public System.Threading.Tasks.Task<Core.Model.Tag.DigitalInput> UpdateDigitalInputAsync(Core.Model.Tag.DigitalInput digitalInput) {
            return base.Channel.UpdateDigitalInputAsync(digitalInput);
        }
        
        public Core.Model.Tag.DigitalInput[] GetAllDigitalInputs() {
            return base.Channel.GetAllDigitalInputs();
        }
        
        public System.Threading.Tasks.Task<Core.Model.Tag.DigitalInput[]> GetAllDigitalInputsAsync() {
            return base.Channel.GetAllDigitalInputsAsync();
        }
        
        public void AddDigitalOutput(Core.Model.Tag.DigitalOutput digitalOutput) {
            base.Channel.AddDigitalOutput(digitalOutput);
        }
        
        public System.Threading.Tasks.Task AddDigitalOutputAsync(Core.Model.Tag.DigitalOutput digitalOutput) {
            return base.Channel.AddDigitalOutputAsync(digitalOutput);
        }
        
        public bool DeleteDigitalOutput(string id) {
            return base.Channel.DeleteDigitalOutput(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteDigitalOutputAsync(string id) {
            return base.Channel.DeleteDigitalOutputAsync(id);
        }
        
        public Core.Model.Tag.DigitalOutput GetDigitalOutput(string id) {
            return base.Channel.GetDigitalOutput(id);
        }
        
        public System.Threading.Tasks.Task<Core.Model.Tag.DigitalOutput> GetDigitalOutputAsync(string id) {
            return base.Channel.GetDigitalOutputAsync(id);
        }
        
        public Core.Model.Tag.DigitalOutput UpdateDigitalOutput(Core.Model.Tag.DigitalOutput digitalOutput) {
            return base.Channel.UpdateDigitalOutput(digitalOutput);
        }
        
        public System.Threading.Tasks.Task<Core.Model.Tag.DigitalOutput> UpdateDigitalOutputAsync(Core.Model.Tag.DigitalOutput digitalOutput) {
            return base.Channel.UpdateDigitalOutputAsync(digitalOutput);
        }
        
        public Core.Model.Tag.DigitalOutput[] GetAllDigitalOutputs() {
            return base.Channel.GetAllDigitalOutputs();
        }
        
        public System.Threading.Tasks.Task<Core.Model.Tag.DigitalOutput[]> GetAllDigitalOutputsAsync() {
            return base.Channel.GetAllDigitalOutputsAsync();
        }
    }
}
