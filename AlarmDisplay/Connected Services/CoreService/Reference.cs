//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AlarmDisplay.CoreService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Tag", Namespace="http://schemas.datacontract.org/2004/07/Core.Model.Tag")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(AlarmDisplay.CoreService.AnalogOutput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(AlarmDisplay.CoreService.DigitalInput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(AlarmDisplay.CoreService.DigitalOutput))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(AlarmDisplay.CoreService.AnalogInput))]
    public partial class Tag : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IOAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TagNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IOAddress {
            get {
                return this.IOAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.IOAddressField, value) != true)) {
                    this.IOAddressField = value;
                    this.RaisePropertyChanged("IOAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TagName {
            get {
                return this.TagNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TagNameField, value) != true)) {
                    this.TagNameField = value;
                    this.RaisePropertyChanged("TagName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AnalogOutput", Namespace="http://schemas.datacontract.org/2004/07/Core.Model.Tag")]
    [System.SerializableAttribute()]
    public partial class AnalogOutput : AlarmDisplay.CoreService.Tag {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double HighLimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double InitialValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LowLimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UnitsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double HighLimit {
            get {
                return this.HighLimitField;
            }
            set {
                if ((this.HighLimitField.Equals(value) != true)) {
                    this.HighLimitField = value;
                    this.RaisePropertyChanged("HighLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double InitialValue {
            get {
                return this.InitialValueField;
            }
            set {
                if ((this.InitialValueField.Equals(value) != true)) {
                    this.InitialValueField = value;
                    this.RaisePropertyChanged("InitialValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double LowLimit {
            get {
                return this.LowLimitField;
            }
            set {
                if ((this.LowLimitField.Equals(value) != true)) {
                    this.LowLimitField = value;
                    this.RaisePropertyChanged("LowLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Units {
            get {
                return this.UnitsField;
            }
            set {
                if ((object.ReferenceEquals(this.UnitsField, value) != true)) {
                    this.UnitsField = value;
                    this.RaisePropertyChanged("Units");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DigitalInput", Namespace="http://schemas.datacontract.org/2004/07/Core.Model.Tag")]
    [System.SerializableAttribute()]
    public partial class DigitalInput : AlarmDisplay.CoreService.Tag {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DriverField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsOnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ScanTimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Driver {
            get {
                return this.DriverField;
            }
            set {
                if ((object.ReferenceEquals(this.DriverField, value) != true)) {
                    this.DriverField = value;
                    this.RaisePropertyChanged("Driver");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsOn {
            get {
                return this.IsOnField;
            }
            set {
                if ((this.IsOnField.Equals(value) != true)) {
                    this.IsOnField = value;
                    this.RaisePropertyChanged("IsOn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ScanTime {
            get {
                return this.ScanTimeField;
            }
            set {
                if ((this.ScanTimeField.Equals(value) != true)) {
                    this.ScanTimeField = value;
                    this.RaisePropertyChanged("ScanTime");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DigitalOutput", Namespace="http://schemas.datacontract.org/2004/07/Core.Model.Tag")]
    [System.SerializableAttribute()]
    public partial class DigitalOutput : AlarmDisplay.CoreService.Tag {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int InitialValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int InitialValue {
            get {
                return this.InitialValueField;
            }
            set {
                if ((this.InitialValueField.Equals(value) != true)) {
                    this.InitialValueField = value;
                    this.RaisePropertyChanged("InitialValue");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AnalogInput", Namespace="http://schemas.datacontract.org/2004/07/Core.Model.Tag")]
    [System.SerializableAttribute()]
    public partial class AnalogInput : AlarmDisplay.CoreService.Tag {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AlarmDisplay.CoreService.Alarm[] AlarmsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DriverField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double HighLimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsOnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LowLimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ScanTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UnitsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AlarmDisplay.CoreService.Alarm[] Alarms {
            get {
                return this.AlarmsField;
            }
            set {
                if ((object.ReferenceEquals(this.AlarmsField, value) != true)) {
                    this.AlarmsField = value;
                    this.RaisePropertyChanged("Alarms");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Driver {
            get {
                return this.DriverField;
            }
            set {
                if ((object.ReferenceEquals(this.DriverField, value) != true)) {
                    this.DriverField = value;
                    this.RaisePropertyChanged("Driver");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double HighLimit {
            get {
                return this.HighLimitField;
            }
            set {
                if ((this.HighLimitField.Equals(value) != true)) {
                    this.HighLimitField = value;
                    this.RaisePropertyChanged("HighLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsOn {
            get {
                return this.IsOnField;
            }
            set {
                if ((this.IsOnField.Equals(value) != true)) {
                    this.IsOnField = value;
                    this.RaisePropertyChanged("IsOn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double LowLimit {
            get {
                return this.LowLimitField;
            }
            set {
                if ((this.LowLimitField.Equals(value) != true)) {
                    this.LowLimitField = value;
                    this.RaisePropertyChanged("LowLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ScanTime {
            get {
                return this.ScanTimeField;
            }
            set {
                if ((this.ScanTimeField.Equals(value) != true)) {
                    this.ScanTimeField = value;
                    this.RaisePropertyChanged("ScanTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Units {
            get {
                return this.UnitsField;
            }
            set {
                if ((object.ReferenceEquals(this.UnitsField, value) != true)) {
                    this.UnitsField = value;
                    this.RaisePropertyChanged("Units");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Alarm", Namespace="http://schemas.datacontract.org/2004/07/Core.Model")]
    [System.SerializableAttribute()]
    public partial class Alarm : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ThresholdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AlarmDisplay.CoreService.AlarmType TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UnitField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((this.PriorityField.Equals(value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Threshold {
            get {
                return this.ThresholdField;
            }
            set {
                if ((this.ThresholdField.Equals(value) != true)) {
                    this.ThresholdField = value;
                    this.RaisePropertyChanged("Threshold");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AlarmDisplay.CoreService.AlarmType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Unit {
            get {
                return this.UnitField;
            }
            set {
                if ((object.ReferenceEquals(this.UnitField, value) != true)) {
                    this.UnitField = value;
                    this.RaisePropertyChanged("Unit");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AlarmType", Namespace="http://schemas.datacontract.org/2004/07/Core.Model")]
    public enum AlarmType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LOW = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HIGH = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AlarmTrigger", Namespace="http://schemas.datacontract.org/2004/07/Core.Model")]
    [System.SerializableAttribute()]
    public partial class AlarmTrigger : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TagNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TagValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ThresholdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimestampField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AlarmDisplay.CoreService.AlarmType TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UnitField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((this.PriorityField.Equals(value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TagName {
            get {
                return this.TagNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TagNameField, value) != true)) {
                    this.TagNameField = value;
                    this.RaisePropertyChanged("TagName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TagValue {
            get {
                return this.TagValueField;
            }
            set {
                if ((this.TagValueField.Equals(value) != true)) {
                    this.TagValueField = value;
                    this.RaisePropertyChanged("TagValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Threshold {
            get {
                return this.ThresholdField;
            }
            set {
                if ((this.ThresholdField.Equals(value) != true)) {
                    this.ThresholdField = value;
                    this.RaisePropertyChanged("Threshold");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Timestamp {
            get {
                return this.TimestampField;
            }
            set {
                if ((this.TimestampField.Equals(value) != true)) {
                    this.TimestampField = value;
                    this.RaisePropertyChanged("Timestamp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AlarmDisplay.CoreService.AlarmType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Unit {
            get {
                return this.UnitField;
            }
            set {
                if ((object.ReferenceEquals(this.UnitField, value) != true)) {
                    this.UnitField = value;
                    this.RaisePropertyChanged("Unit");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CoreService.IUserService")]
    public interface IUserService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Registration", ReplyAction="http://tempuri.org/IUserService/RegistrationResponse")]
        string Registration(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Registration", ReplyAction="http://tempuri.org/IUserService/RegistrationResponse")]
        System.Threading.Tasks.Task<string> RegistrationAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Login", ReplyAction="http://tempuri.org/IUserService/LoginResponse")]
        string Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Login", ReplyAction="http://tempuri.org/IUserService/LoginResponse")]
        System.Threading.Tasks.Task<string> LoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Logout", ReplyAction="http://tempuri.org/IUserService/LogoutResponse")]
        bool Logout(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Logout", ReplyAction="http://tempuri.org/IUserService/LogoutResponse")]
        System.Threading.Tasks.Task<bool> LogoutAsync(string token);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserServiceChannel : AlarmDisplay.CoreService.IUserService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserServiceClient : System.ServiceModel.ClientBase<AlarmDisplay.CoreService.IUserService>, AlarmDisplay.CoreService.IUserService {
        
        public UserServiceClient() {
        }
        
        public UserServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Registration(string username, string password) {
            return base.Channel.Registration(username, password);
        }
        
        public System.Threading.Tasks.Task<string> RegistrationAsync(string username, string password) {
            return base.Channel.RegistrationAsync(username, password);
        }
        
        public string Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        public System.Threading.Tasks.Task<string> LoginAsync(string username, string password) {
            return base.Channel.LoginAsync(username, password);
        }
        
        public bool Logout(string token) {
            return base.Channel.Logout(token);
        }
        
        public System.Threading.Tasks.Task<bool> LogoutAsync(string token) {
            return base.Channel.LogoutAsync(token);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CoreService.ITagService")]
    public interface ITagService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/AddAnalogInput", ReplyAction="http://tempuri.org/ITagService/AddAnalogInputResponse")]
        void AddAnalogInput(AlarmDisplay.CoreService.AnalogInput analogInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/AddAnalogInput", ReplyAction="http://tempuri.org/ITagService/AddAnalogInputResponse")]
        System.Threading.Tasks.Task AddAnalogInputAsync(AlarmDisplay.CoreService.AnalogInput analogInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/DeleteTag", ReplyAction="http://tempuri.org/ITagService/DeleteTagResponse")]
        bool DeleteTag(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/DeleteTag", ReplyAction="http://tempuri.org/ITagService/DeleteTagResponse")]
        System.Threading.Tasks.Task<bool> DeleteTagAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/ToggleTagScan", ReplyAction="http://tempuri.org/ITagService/ToggleTagScanResponse")]
        void ToggleTagScan(string id, bool isOn, bool isAnalog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/ToggleTagScan", ReplyAction="http://tempuri.org/ITagService/ToggleTagScanResponse")]
        System.Threading.Tasks.Task ToggleTagScanAsync(string id, bool isOn, bool isAnalog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/GetAnalogInput", ReplyAction="http://tempuri.org/ITagService/GetAnalogInputResponse")]
        AlarmDisplay.CoreService.AnalogInput GetAnalogInput(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/GetAnalogInput", ReplyAction="http://tempuri.org/ITagService/GetAnalogInputResponse")]
        System.Threading.Tasks.Task<AlarmDisplay.CoreService.AnalogInput> GetAnalogInputAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/UpdateAnalogInput", ReplyAction="http://tempuri.org/ITagService/UpdateAnalogInputResponse")]
        AlarmDisplay.CoreService.AnalogInput UpdateAnalogInput(AlarmDisplay.CoreService.AnalogInput analogInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/UpdateAnalogInput", ReplyAction="http://tempuri.org/ITagService/UpdateAnalogInputResponse")]
        System.Threading.Tasks.Task<AlarmDisplay.CoreService.AnalogInput> UpdateAnalogInputAsync(AlarmDisplay.CoreService.AnalogInput analogInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/GetAllAnalogInputs", ReplyAction="http://tempuri.org/ITagService/GetAllAnalogInputsResponse")]
        AlarmDisplay.CoreService.AnalogInput[] GetAllAnalogInputs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/GetAllAnalogInputs", ReplyAction="http://tempuri.org/ITagService/GetAllAnalogInputsResponse")]
        System.Threading.Tasks.Task<AlarmDisplay.CoreService.AnalogInput[]> GetAllAnalogInputsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/AddAnalogOutput", ReplyAction="http://tempuri.org/ITagService/AddAnalogOutputResponse")]
        void AddAnalogOutput(AlarmDisplay.CoreService.AnalogOutput analogOutput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/AddAnalogOutput", ReplyAction="http://tempuri.org/ITagService/AddAnalogOutputResponse")]
        System.Threading.Tasks.Task AddAnalogOutputAsync(AlarmDisplay.CoreService.AnalogOutput analogOutput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/GetAnalogOutput", ReplyAction="http://tempuri.org/ITagService/GetAnalogOutputResponse")]
        AlarmDisplay.CoreService.AnalogOutput GetAnalogOutput(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/GetAnalogOutput", ReplyAction="http://tempuri.org/ITagService/GetAnalogOutputResponse")]
        System.Threading.Tasks.Task<AlarmDisplay.CoreService.AnalogOutput> GetAnalogOutputAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/UpdateAnalogOutput", ReplyAction="http://tempuri.org/ITagService/UpdateAnalogOutputResponse")]
        AlarmDisplay.CoreService.AnalogOutput UpdateAnalogOutput(AlarmDisplay.CoreService.AnalogOutput analogOutput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/UpdateAnalogOutput", ReplyAction="http://tempuri.org/ITagService/UpdateAnalogOutputResponse")]
        System.Threading.Tasks.Task<AlarmDisplay.CoreService.AnalogOutput> UpdateAnalogOutputAsync(AlarmDisplay.CoreService.AnalogOutput analogOutput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/GetAllAnalogOutputs", ReplyAction="http://tempuri.org/ITagService/GetAllAnalogOutputsResponse")]
        AlarmDisplay.CoreService.AnalogOutput[] GetAllAnalogOutputs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/GetAllAnalogOutputs", ReplyAction="http://tempuri.org/ITagService/GetAllAnalogOutputsResponse")]
        System.Threading.Tasks.Task<AlarmDisplay.CoreService.AnalogOutput[]> GetAllAnalogOutputsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/AddDigitalInput", ReplyAction="http://tempuri.org/ITagService/AddDigitalInputResponse")]
        void AddDigitalInput(AlarmDisplay.CoreService.DigitalInput digitalInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/AddDigitalInput", ReplyAction="http://tempuri.org/ITagService/AddDigitalInputResponse")]
        System.Threading.Tasks.Task AddDigitalInputAsync(AlarmDisplay.CoreService.DigitalInput digitalInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/GetDigitalInput", ReplyAction="http://tempuri.org/ITagService/GetDigitalInputResponse")]
        AlarmDisplay.CoreService.DigitalInput GetDigitalInput(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/GetDigitalInput", ReplyAction="http://tempuri.org/ITagService/GetDigitalInputResponse")]
        System.Threading.Tasks.Task<AlarmDisplay.CoreService.DigitalInput> GetDigitalInputAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/UpdateDigitalInput", ReplyAction="http://tempuri.org/ITagService/UpdateDigitalInputResponse")]
        AlarmDisplay.CoreService.DigitalInput UpdateDigitalInput(AlarmDisplay.CoreService.DigitalInput digitalInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/UpdateDigitalInput", ReplyAction="http://tempuri.org/ITagService/UpdateDigitalInputResponse")]
        System.Threading.Tasks.Task<AlarmDisplay.CoreService.DigitalInput> UpdateDigitalInputAsync(AlarmDisplay.CoreService.DigitalInput digitalInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/GetAllDigitalInputs", ReplyAction="http://tempuri.org/ITagService/GetAllDigitalInputsResponse")]
        AlarmDisplay.CoreService.DigitalInput[] GetAllDigitalInputs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/GetAllDigitalInputs", ReplyAction="http://tempuri.org/ITagService/GetAllDigitalInputsResponse")]
        System.Threading.Tasks.Task<AlarmDisplay.CoreService.DigitalInput[]> GetAllDigitalInputsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/AddDigitalOutput", ReplyAction="http://tempuri.org/ITagService/AddDigitalOutputResponse")]
        void AddDigitalOutput(AlarmDisplay.CoreService.DigitalOutput digitalOutput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/AddDigitalOutput", ReplyAction="http://tempuri.org/ITagService/AddDigitalOutputResponse")]
        System.Threading.Tasks.Task AddDigitalOutputAsync(AlarmDisplay.CoreService.DigitalOutput digitalOutput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/GetDigitalOutput", ReplyAction="http://tempuri.org/ITagService/GetDigitalOutputResponse")]
        AlarmDisplay.CoreService.DigitalOutput GetDigitalOutput(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/GetDigitalOutput", ReplyAction="http://tempuri.org/ITagService/GetDigitalOutputResponse")]
        System.Threading.Tasks.Task<AlarmDisplay.CoreService.DigitalOutput> GetDigitalOutputAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/UpdateDigitalOutput", ReplyAction="http://tempuri.org/ITagService/UpdateDigitalOutputResponse")]
        AlarmDisplay.CoreService.DigitalOutput UpdateDigitalOutput(AlarmDisplay.CoreService.DigitalOutput digitalOutput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/UpdateDigitalOutput", ReplyAction="http://tempuri.org/ITagService/UpdateDigitalOutputResponse")]
        System.Threading.Tasks.Task<AlarmDisplay.CoreService.DigitalOutput> UpdateDigitalOutputAsync(AlarmDisplay.CoreService.DigitalOutput digitalOutput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/GetAllDigitalOutputs", ReplyAction="http://tempuri.org/ITagService/GetAllDigitalOutputsResponse")]
        AlarmDisplay.CoreService.DigitalOutput[] GetAllDigitalOutputs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/GetAllDigitalOutputs", ReplyAction="http://tempuri.org/ITagService/GetAllDigitalOutputsResponse")]
        System.Threading.Tasks.Task<AlarmDisplay.CoreService.DigitalOutput[]> GetAllDigitalOutputsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITagServiceChannel : AlarmDisplay.CoreService.ITagService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TagServiceClient : System.ServiceModel.ClientBase<AlarmDisplay.CoreService.ITagService>, AlarmDisplay.CoreService.ITagService {
        
        public TagServiceClient() {
        }
        
        public TagServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TagServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TagServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TagServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddAnalogInput(AlarmDisplay.CoreService.AnalogInput analogInput) {
            base.Channel.AddAnalogInput(analogInput);
        }
        
        public System.Threading.Tasks.Task AddAnalogInputAsync(AlarmDisplay.CoreService.AnalogInput analogInput) {
            return base.Channel.AddAnalogInputAsync(analogInput);
        }
        
        public bool DeleteTag(string id) {
            return base.Channel.DeleteTag(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteTagAsync(string id) {
            return base.Channel.DeleteTagAsync(id);
        }
        
        public void ToggleTagScan(string id, bool isOn, bool isAnalog) {
            base.Channel.ToggleTagScan(id, isOn, isAnalog);
        }
        
        public System.Threading.Tasks.Task ToggleTagScanAsync(string id, bool isOn, bool isAnalog) {
            return base.Channel.ToggleTagScanAsync(id, isOn, isAnalog);
        }
        
        public AlarmDisplay.CoreService.AnalogInput GetAnalogInput(string id) {
            return base.Channel.GetAnalogInput(id);
        }
        
        public System.Threading.Tasks.Task<AlarmDisplay.CoreService.AnalogInput> GetAnalogInputAsync(string id) {
            return base.Channel.GetAnalogInputAsync(id);
        }
        
        public AlarmDisplay.CoreService.AnalogInput UpdateAnalogInput(AlarmDisplay.CoreService.AnalogInput analogInput) {
            return base.Channel.UpdateAnalogInput(analogInput);
        }
        
        public System.Threading.Tasks.Task<AlarmDisplay.CoreService.AnalogInput> UpdateAnalogInputAsync(AlarmDisplay.CoreService.AnalogInput analogInput) {
            return base.Channel.UpdateAnalogInputAsync(analogInput);
        }
        
        public AlarmDisplay.CoreService.AnalogInput[] GetAllAnalogInputs() {
            return base.Channel.GetAllAnalogInputs();
        }
        
        public System.Threading.Tasks.Task<AlarmDisplay.CoreService.AnalogInput[]> GetAllAnalogInputsAsync() {
            return base.Channel.GetAllAnalogInputsAsync();
        }
        
        public void AddAnalogOutput(AlarmDisplay.CoreService.AnalogOutput analogOutput) {
            base.Channel.AddAnalogOutput(analogOutput);
        }
        
        public System.Threading.Tasks.Task AddAnalogOutputAsync(AlarmDisplay.CoreService.AnalogOutput analogOutput) {
            return base.Channel.AddAnalogOutputAsync(analogOutput);
        }
        
        public AlarmDisplay.CoreService.AnalogOutput GetAnalogOutput(string id) {
            return base.Channel.GetAnalogOutput(id);
        }
        
        public System.Threading.Tasks.Task<AlarmDisplay.CoreService.AnalogOutput> GetAnalogOutputAsync(string id) {
            return base.Channel.GetAnalogOutputAsync(id);
        }
        
        public AlarmDisplay.CoreService.AnalogOutput UpdateAnalogOutput(AlarmDisplay.CoreService.AnalogOutput analogOutput) {
            return base.Channel.UpdateAnalogOutput(analogOutput);
        }
        
        public System.Threading.Tasks.Task<AlarmDisplay.CoreService.AnalogOutput> UpdateAnalogOutputAsync(AlarmDisplay.CoreService.AnalogOutput analogOutput) {
            return base.Channel.UpdateAnalogOutputAsync(analogOutput);
        }
        
        public AlarmDisplay.CoreService.AnalogOutput[] GetAllAnalogOutputs() {
            return base.Channel.GetAllAnalogOutputs();
        }
        
        public System.Threading.Tasks.Task<AlarmDisplay.CoreService.AnalogOutput[]> GetAllAnalogOutputsAsync() {
            return base.Channel.GetAllAnalogOutputsAsync();
        }
        
        public void AddDigitalInput(AlarmDisplay.CoreService.DigitalInput digitalInput) {
            base.Channel.AddDigitalInput(digitalInput);
        }
        
        public System.Threading.Tasks.Task AddDigitalInputAsync(AlarmDisplay.CoreService.DigitalInput digitalInput) {
            return base.Channel.AddDigitalInputAsync(digitalInput);
        }
        
        public AlarmDisplay.CoreService.DigitalInput GetDigitalInput(string id) {
            return base.Channel.GetDigitalInput(id);
        }
        
        public System.Threading.Tasks.Task<AlarmDisplay.CoreService.DigitalInput> GetDigitalInputAsync(string id) {
            return base.Channel.GetDigitalInputAsync(id);
        }
        
        public AlarmDisplay.CoreService.DigitalInput UpdateDigitalInput(AlarmDisplay.CoreService.DigitalInput digitalInput) {
            return base.Channel.UpdateDigitalInput(digitalInput);
        }
        
        public System.Threading.Tasks.Task<AlarmDisplay.CoreService.DigitalInput> UpdateDigitalInputAsync(AlarmDisplay.CoreService.DigitalInput digitalInput) {
            return base.Channel.UpdateDigitalInputAsync(digitalInput);
        }
        
        public AlarmDisplay.CoreService.DigitalInput[] GetAllDigitalInputs() {
            return base.Channel.GetAllDigitalInputs();
        }
        
        public System.Threading.Tasks.Task<AlarmDisplay.CoreService.DigitalInput[]> GetAllDigitalInputsAsync() {
            return base.Channel.GetAllDigitalInputsAsync();
        }
        
        public void AddDigitalOutput(AlarmDisplay.CoreService.DigitalOutput digitalOutput) {
            base.Channel.AddDigitalOutput(digitalOutput);
        }
        
        public System.Threading.Tasks.Task AddDigitalOutputAsync(AlarmDisplay.CoreService.DigitalOutput digitalOutput) {
            return base.Channel.AddDigitalOutputAsync(digitalOutput);
        }
        
        public AlarmDisplay.CoreService.DigitalOutput GetDigitalOutput(string id) {
            return base.Channel.GetDigitalOutput(id);
        }
        
        public System.Threading.Tasks.Task<AlarmDisplay.CoreService.DigitalOutput> GetDigitalOutputAsync(string id) {
            return base.Channel.GetDigitalOutputAsync(id);
        }
        
        public AlarmDisplay.CoreService.DigitalOutput UpdateDigitalOutput(AlarmDisplay.CoreService.DigitalOutput digitalOutput) {
            return base.Channel.UpdateDigitalOutput(digitalOutput);
        }
        
        public System.Threading.Tasks.Task<AlarmDisplay.CoreService.DigitalOutput> UpdateDigitalOutputAsync(AlarmDisplay.CoreService.DigitalOutput digitalOutput) {
            return base.Channel.UpdateDigitalOutputAsync(digitalOutput);
        }
        
        public AlarmDisplay.CoreService.DigitalOutput[] GetAllDigitalOutputs() {
            return base.Channel.GetAllDigitalOutputs();
        }
        
        public System.Threading.Tasks.Task<AlarmDisplay.CoreService.DigitalOutput[]> GetAllDigitalOutputsAsync() {
            return base.Channel.GetAllDigitalOutputsAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CoreService.IAlarmService", CallbackContract=typeof(AlarmDisplay.CoreService.IAlarmServiceCallback))]
    public interface IAlarmService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlarmService/AddAlarm", ReplyAction="http://tempuri.org/IAlarmService/AddAlarmResponse")]
        void AddAlarm(AlarmDisplay.CoreService.AlarmTrigger alarm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlarmService/AddAlarm", ReplyAction="http://tempuri.org/IAlarmService/AddAlarmResponse")]
        System.Threading.Tasks.Task AddAlarmAsync(AlarmDisplay.CoreService.AlarmTrigger alarm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlarmService/RemoveAlarm", ReplyAction="http://tempuri.org/IAlarmService/RemoveAlarmResponse")]
        void RemoveAlarm(AlarmDisplay.CoreService.AlarmTrigger alarm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlarmService/RemoveAlarm", ReplyAction="http://tempuri.org/IAlarmService/RemoveAlarmResponse")]
        System.Threading.Tasks.Task RemoveAlarmAsync(AlarmDisplay.CoreService.AlarmTrigger alarm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlarmService/GetAlarmById", ReplyAction="http://tempuri.org/IAlarmService/GetAlarmByIdResponse")]
        AlarmDisplay.CoreService.AlarmTrigger GetAlarmById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlarmService/GetAlarmById", ReplyAction="http://tempuri.org/IAlarmService/GetAlarmByIdResponse")]
        System.Threading.Tasks.Task<AlarmDisplay.CoreService.AlarmTrigger> GetAlarmByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlarmService/GetAllAlarms", ReplyAction="http://tempuri.org/IAlarmService/GetAllAlarmsResponse")]
        AlarmDisplay.CoreService.AlarmTrigger[] GetAllAlarms();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlarmService/GetAllAlarms", ReplyAction="http://tempuri.org/IAlarmService/GetAllAlarmsResponse")]
        System.Threading.Tasks.Task<AlarmDisplay.CoreService.AlarmTrigger[]> GetAllAlarmsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlarmService/LogAlarm", ReplyAction="http://tempuri.org/IAlarmService/LogAlarmResponse")]
        void LogAlarm(AlarmDisplay.CoreService.AlarmTrigger alarm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlarmService/LogAlarm", ReplyAction="http://tempuri.org/IAlarmService/LogAlarmResponse")]
        System.Threading.Tasks.Task LogAlarmAsync(AlarmDisplay.CoreService.AlarmTrigger alarm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlarmService/GetAlarmsInPeriod", ReplyAction="http://tempuri.org/IAlarmService/GetAlarmsInPeriodResponse")]
        AlarmDisplay.CoreService.AlarmTrigger[] GetAlarmsInPeriod(System.DateTime startTime, System.DateTime endTime, bool sortOption);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlarmService/GetAlarmsInPeriod", ReplyAction="http://tempuri.org/IAlarmService/GetAlarmsInPeriodResponse")]
        System.Threading.Tasks.Task<AlarmDisplay.CoreService.AlarmTrigger[]> GetAlarmsInPeriodAsync(System.DateTime startTime, System.DateTime endTime, bool sortOption);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlarmService/GetAlarmsByPriority", ReplyAction="http://tempuri.org/IAlarmService/GetAlarmsByPriorityResponse")]
        AlarmDisplay.CoreService.AlarmTrigger[] GetAlarmsByPriority(int priority);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlarmService/GetAlarmsByPriority", ReplyAction="http://tempuri.org/IAlarmService/GetAlarmsByPriorityResponse")]
        System.Threading.Tasks.Task<AlarmDisplay.CoreService.AlarmTrigger[]> GetAlarmsByPriorityAsync(int priority);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAlarmServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAlarmService/AlarmTriggered")]
        void AlarmTriggered(string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAlarmServiceChannel : AlarmDisplay.CoreService.IAlarmService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AlarmServiceClient : System.ServiceModel.DuplexClientBase<AlarmDisplay.CoreService.IAlarmService>, AlarmDisplay.CoreService.IAlarmService {
        
        public AlarmServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public AlarmServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public AlarmServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AlarmServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AlarmServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void AddAlarm(AlarmDisplay.CoreService.AlarmTrigger alarm) {
            base.Channel.AddAlarm(alarm);
        }
        
        public System.Threading.Tasks.Task AddAlarmAsync(AlarmDisplay.CoreService.AlarmTrigger alarm) {
            return base.Channel.AddAlarmAsync(alarm);
        }
        
        public void RemoveAlarm(AlarmDisplay.CoreService.AlarmTrigger alarm) {
            base.Channel.RemoveAlarm(alarm);
        }
        
        public System.Threading.Tasks.Task RemoveAlarmAsync(AlarmDisplay.CoreService.AlarmTrigger alarm) {
            return base.Channel.RemoveAlarmAsync(alarm);
        }
        
        public AlarmDisplay.CoreService.AlarmTrigger GetAlarmById(int id) {
            return base.Channel.GetAlarmById(id);
        }
        
        public System.Threading.Tasks.Task<AlarmDisplay.CoreService.AlarmTrigger> GetAlarmByIdAsync(int id) {
            return base.Channel.GetAlarmByIdAsync(id);
        }
        
        public AlarmDisplay.CoreService.AlarmTrigger[] GetAllAlarms() {
            return base.Channel.GetAllAlarms();
        }
        
        public System.Threading.Tasks.Task<AlarmDisplay.CoreService.AlarmTrigger[]> GetAllAlarmsAsync() {
            return base.Channel.GetAllAlarmsAsync();
        }
        
        public void LogAlarm(AlarmDisplay.CoreService.AlarmTrigger alarm) {
            base.Channel.LogAlarm(alarm);
        }
        
        public System.Threading.Tasks.Task LogAlarmAsync(AlarmDisplay.CoreService.AlarmTrigger alarm) {
            return base.Channel.LogAlarmAsync(alarm);
        }
        
        public AlarmDisplay.CoreService.AlarmTrigger[] GetAlarmsInPeriod(System.DateTime startTime, System.DateTime endTime, bool sortOption) {
            return base.Channel.GetAlarmsInPeriod(startTime, endTime, sortOption);
        }
        
        public System.Threading.Tasks.Task<AlarmDisplay.CoreService.AlarmTrigger[]> GetAlarmsInPeriodAsync(System.DateTime startTime, System.DateTime endTime, bool sortOption) {
            return base.Channel.GetAlarmsInPeriodAsync(startTime, endTime, sortOption);
        }
        
        public AlarmDisplay.CoreService.AlarmTrigger[] GetAlarmsByPriority(int priority) {
            return base.Channel.GetAlarmsByPriority(priority);
        }
        
        public System.Threading.Tasks.Task<AlarmDisplay.CoreService.AlarmTrigger[]> GetAlarmsByPriorityAsync(int priority) {
            return base.Channel.GetAlarmsByPriorityAsync(priority);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CoreService.ITrendingService", CallbackContract=typeof(AlarmDisplay.CoreService.ITrendingServiceCallback))]
    public interface ITrendingService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrendingService/SubscribeToTrending", ReplyAction="http://tempuri.org/ITrendingService/SubscribeToTrendingResponse")]
        void SubscribeToTrending();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrendingService/SubscribeToTrending", ReplyAction="http://tempuri.org/ITrendingService/SubscribeToTrendingResponse")]
        System.Threading.Tasks.Task SubscribeToTrendingAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITrendingServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrendingService/initTagTable")]
        void initTagTable(System.Collections.Generic.Dictionary<string, double> tags);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrendingService/addTagValue")]
        void addTagValue(string tagName, double value);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrendingService/removeTag")]
        void removeTag(string tagName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITrendingServiceChannel : AlarmDisplay.CoreService.ITrendingService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TrendingServiceClient : System.ServiceModel.DuplexClientBase<AlarmDisplay.CoreService.ITrendingService>, AlarmDisplay.CoreService.ITrendingService {
        
        public TrendingServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public TrendingServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public TrendingServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TrendingServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TrendingServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SubscribeToTrending() {
            base.Channel.SubscribeToTrending();
        }
        
        public System.Threading.Tasks.Task SubscribeToTrendingAsync() {
            return base.Channel.SubscribeToTrendingAsync();
        }
    }
}
